fn zoom(n: i32) -> String {

    let mut s : String = String::new();

    fn depth(x: i32, y: i32, n: i32) -> i32 {
        std::cmp::min(
            std::cmp::min(x, y),
            std::cmp::min((x-n+1).abs(), (y-n+1).abs())
        )
    }

    let layers = n/2;
    let (c0, c1) = if layers % 2 == 0 {('□', '■')} else {('■', '□')};

    for y in 0..n {
        for x in 0..n {
            let layer = depth(x, y, n);
            if layer % 2 == 1 {
                s.push(c0);
            } else {
                s.push(c1);
            }
        }
        if y != n-1 {
            s.push('\n');
        }
    }
    s
}

#[test]
fn test0() {
  assert_eq!(zoom(1), "■");
}

#[test]
fn test1() {
  assert_eq!(zoom(3), "\
□□□
□■□
□□□"
  );
}

#[test]
fn test2() {
  assert_eq!(zoom(5), "\
■■■■■
■□□□■
■□■□■
■□□□■
■■■■■"
  );
}

#[test]
fn test3() {
  assert_eq!(zoom(7), "\
□□□□□□□
□■■■■■□
□■□□□■□
□■□■□■□
□■□□□■□
□■■■■■□
□□□□□□□"
  );
}

#[test]
fn test4() {
  assert_eq!(zoom(9), "\
■■■■■■■■■
■□□□□□□□■
■□■■■■■□■
■□■□□□■□■
■□■□■□■□■
■□■□□□■□■
■□■■■■■□■
■□□□□□□□■
■■■■■■■■■"
  );
}

#[test]
fn test5() {
  assert_eq!(zoom(11), "\
□□□□□□□□□□□
□■■■■■■■■■□
□■□□□□□□□■□
□■□■■■■■□■□
□■□■□□□■□■□
□■□■□■□■□■□
□■□■□□□■□■□
□■□■■■■■□■□
□■□□□□□□□■□
□■■■■■■■■■□
□□□□□□□□□□□"
  );
}

#[test]
fn test6() {
  assert_eq!(zoom(13), "\
■■■■■■■■■■■■■
■□□□□□□□□□□□■
■□■■■■■■■■■□■
■□■□□□□□□□■□■
■□■□■■■■■□■□■
■□■□■□□□■□■□■
■□■□■□■□■□■□■
■□■□■□□□■□■□■
■□■□■■■■■□■□■
■□■□□□□□□□■□■
■□■■■■■■■■■□■
■□□□□□□□□□□□■
■■■■■■■■■■■■■"
  );
}

#[test]
fn test7() {
  assert_eq!(zoom(17), "\
■■■■■■■■■■■■■■■■■
■□□□□□□□□□□□□□□□■
■□■■■■■■■■■■■■■□■
■□■□□□□□□□□□□□■□■
■□■□■■■■■■■■■□■□■
■□■□■□□□□□□□■□■□■
■□■□■□■■■■■□■□■□■
■□■□■□■□□□■□■□■□■
■□■□■□■□■□■□■□■□■
■□■□■□■□□□■□■□■□■
■□■□■□■■■■■□■□■□■
■□■□■□□□□□□□■□■□■
■□■□■■■■■■■■■□■□■
■□■□□□□□□□□□□□■□■
■□■■■■■■■■■■■■■□■
■□□□□□□□□□□□□□□□■
■■■■■■■■■■■■■■■■■"
  );
}

#[test]
fn test8() {
  assert_eq!(zoom(19), "\
□□□□□□□□□□□□□□□□□□□
□■■■■■■■■■■■■■■■■■□
□■□□□□□□□□□□□□□□□■□
□■□■■■■■■■■■■■■■□■□
□■□■□□□□□□□□□□□■□■□
□■□■□■■■■■■■■■□■□■□
□■□■□■□□□□□□□■□■□■□
□■□■□■□■■■■■□■□■□■□
□■□■□■□■□□□■□■□■□■□
□■□■□■□■□■□■□■□■□■□
□■□■□■□■□□□■□■□■□■□
□■□■□■□■■■■■□■□■□■□
□■□■□■□□□□□□□■□■□■□
□■□■□■■■■■■■■■□■□■□
□■□■□□□□□□□□□□□■□■□
□■□■■■■■■■■■■■■■□■□
□■□□□□□□□□□□□□□□□■□
□■■■■■■■■■■■■■■■■■□
□□□□□□□□□□□□□□□□□□□"
  );
}

#[test]
fn test9() {
  assert_eq!(zoom(21), "\
■■■■■■■■■■■■■■■■■■■■■
■□□□□□□□□□□□□□□□□□□□■
■□■■■■■■■■■■■■■■■■■□■
■□■□□□□□□□□□□□□□□□■□■
■□■□■■■■■■■■■■■■■□■□■
■□■□■□□□□□□□□□□□■□■□■
■□■□■□■■■■■■■■■□■□■□■
■□■□■□■□□□□□□□■□■□■□■
■□■□■□■□■■■■■□■□■□■□■
■□■□■□■□■□□□■□■□■□■□■
■□■□■□■□■□■□■□■□■□■□■
■□■□■□■□■□□□■□■□■□■□■
■□■□■□■□■■■■■□■□■□■□■
■□■□■□■□□□□□□□■□■□■□■
■□■□■□■■■■■■■■■□■□■□■
■□■□■□□□□□□□□□□□■□■□■
■□■□■■■■■■■■■■■■■□■□■
■□■□□□□□□□□□□□□□□□■□■
■□■■■■■■■■■■■■■■■■■□■
■□□□□□□□□□□□□□□□□□□□■
■■■■■■■■■■■■■■■■■■■■■"
  );
}

